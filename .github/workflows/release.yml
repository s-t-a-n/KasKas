name: release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tag pushes (e.g., v1.0.0)

permissions:
  contents: write

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: ~/.platformio
          key: ${{ runner.os }}-platformio-${{ hashFiles('**/platformio.ini') }}
          restore-keys: |
            ${{ runner.os }}-platformio-

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio

      - name: Build firmware (ELF and BIN)
        run: |
          platformio run
          for env in $(find .pio/build -maxdepth 1 -mindepth 1 -type d -printf '%f\n'); do
            mkdir -p build_outputs
            cp .pio/build/$env/firmware.elf build_outputs/firmware_$env.elf
            cp .pio/build/$env/firmware.bin build_outputs/firmware_$env.bin
          done

      - name: Create firmware zip
        run: |
          mkdir -p release
          cp -r build_outputs/* release/
          zip -r release/firmware.zip release/*

      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref_type == 'tag'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          files: |
            release/firmware.zip
